/*
	Copyright (c) 2013-2015, Stefano Pizzocaro. All rights reserved. Use is subject to license terms.

	This file is part of Joty 2.0 Core.

	Joty 2.0 Core is free software: you can redistribute it and/or modify
	it under the terms of the GNU Lesser General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	Joty 2.0 Core is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU Lesser General Public License for more details.

	You should have received a copy of the GNU Lesser General Public License
	along with Joty 2.0 Core.  If not, see <http://www.gnu.org/licenses/>.
 */
	
package org.joty.jotyplugin;

import java.io.*;
import java.util.Vector;

import org.eclipse.jface.action.*;
import org.eclipse.jface.viewers.*;
import org.eclipse.swt.SWT;
import org.eclipse.swt.SWTException;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.widgets.*;
import org.eclipse.ui.*;
import org.eclipse.ui.part.ViewPart;

/**
 * Extends the org.eclipse.ui.part.ViewPart to provide, within a custom Eclipse
 * view, the presentation of the content of the log file generated by the Joty
 * framework during the use of the Eclipse WindowBuilder tool by the designer of
 * the application Joty components.
 * 
 * @see org.joty.workstation.app.Application#checkWBE(java.awt.Container)
 * @see org.joty.gui.TermContainerPanel#notifyJotyDesignError
 * 
 *
 */
public class JotyDesignErrorWiew extends ViewPart {

	public static final String ID = "org.joty.jotyplugin.JotyDesignErrorView";
	private String m_jotyDesignLogFile = System.getProperty("user.home") + "/JotyDesignLog.log";

	private TableViewer m_viewer;
	public Action m_action;
	private Composite m_parent;

	class JotyErrorLogViewThread implements Runnable {
		private JotyDesignErrorWiew m_view;

		public JotyErrorLogViewThread(JotyDesignErrorWiew view) {
			m_view = view;
		}

		public void start() {
			Thread t = new Thread(this);
			t.start();
		}

		/** Ask every three seconds the user interface thread for refreshing the view  */
		public void run() {
			try {
				while (m_view != null) {
					m_view.updateOnGuiThread();
					Thread.sleep(3000);
				}
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}

	/** Provides the file lines as array of String objects */
	class ViewContentProvider implements IStructuredContentProvider {
		@Override
		public void inputChanged(Viewer v, Object oldInput, Object newInput) {
		}

		@Override
		public void dispose() {
		}

		@Override
		public Object[] getElements(Object parent) {
			Vector<String> vector = getDataFromLog();
			String retVal[] = new String[vector.size()];
			for (int i = 0; i < vector.size(); i++)
				retVal[i] = vector.get(i);
			return retVal;
		}

	}

	/** Splits the line content into two distinct columns if the separator is present */
	class ViewLabelProvider extends LabelProvider implements
			ITableLabelProvider {

		@Override
		public String getColumnText(Object obj, int index) {
			String text = getText(obj);
			int separatorPos = text.indexOf(" : ");
			return separatorPos == -1 ? 
					(index == 0 ? text : "") : 
					(index == 0 ? 
							text.substring(0, separatorPos) : 
							text.substring(separatorPos + 2, text.length() - 1));
		}

		@Override
		public Image getColumnImage(Object obj, int index) {
			return index == 0 ? getImage(obj) : null;
		}

		public Image getImage(Object obj) {
			return PlatformUI.getWorkbench().getSharedImages()
					.getImage(ISharedImages.IMG_DEC_FIELD_ERROR);
		}
	}

	class NameSorter extends ViewerSorter {
	}

	public JotyDesignErrorWiew() {
	}

	public void refresh() {
		m_viewer.setInput(getDataFromLog());
		m_viewer.refresh();
	}

	/** Returns the file content as Vector of lines */
	public Vector<String> getDataFromLog() {
		Vector<String> vector = new Vector<String>();
		boolean normal = true;
		try {
			String line;
			InputStream fis = new FileInputStream(m_jotyDesignLogFile);
			BufferedReader br = new BufferedReader(new InputStreamReader(fis, "UTF-8"));
			while ((line = br.readLine()) != null)
				vector.add(line);
			br.close();
			fis.close();
		} catch (FileNotFoundException e) {
			normal = false;
		} catch (IOException e) {
			normal = false;
		}
		if (!normal) {
			vector.removeAllElements();
			vector.add("getDataFromLog exception");
		}
		return vector;
	}

	/** Lets the user interface thread to be the actor of the view refresh at the first opportunity */
	public void updateOnGuiThread() {
		Display.getDefault().asyncExec(new Runnable() {
			@Override
			public void run() {
				Boolean visible = false;
				try {
					visible = m_parent.getVisible();
				} catch (SWTException e) {
				}
				if (visible)
					refresh();
			}
		});
	}

	@Override
	public void createPartControl(Composite parent) {
		m_viewer = new TableViewer(parent, SWT.MULTI | SWT.H_SCROLL
				| SWT.V_SCROLL);
		TableColumn column1 = new TableColumn(m_viewer.getTable(), SWT.LEFT);
		column1.setText("Component");
		column1.setWidth(200);
		TableColumn column2 = new TableColumn(m_viewer.getTable(), SWT.LEFT);
		column2.setText("Reason");
		column2.setWidth(10000);
		m_viewer.getTable().setHeaderVisible(true);

		m_viewer.setContentProvider(new ViewContentProvider());
		m_viewer.setLabelProvider(new ViewLabelProvider());
		m_viewer.setSorter(new NameSorter());
		m_viewer.setInput(getDataFromLog());
		makeActions();
		hookContextMenu();
		contributeToActionBars();
		JotyErrorLogViewThread workerThread = new JotyErrorLogViewThread(this);
		workerThread.start();
		m_parent = parent;
	}

	/** Creates and installs a context menu on the view */
	private void hookContextMenu() {
		MenuManager menuMgr = new MenuManager("#PopupMenu");
		menuMgr.setRemoveAllWhenShown(true);
		menuMgr.addMenuListener(new IMenuListener() {
			public void menuAboutToShow(IMenuManager manager) {
				JotyDesignErrorWiew.this.fillContextMenu(manager);
			}
		});
		Menu menu = menuMgr.createContextMenu(m_viewer.getControl());
		m_viewer.getControl().setMenu(menu);
		getSite().registerContextMenu(menuMgr, m_viewer);
	}

	private void contributeToActionBars() {
		IActionBars bars = getViewSite().getActionBars();
		fillLocalPullDown(bars.getMenuManager());
		fillLocalToolBar(bars.getToolBarManager());
	}

	private void fillLocalPullDown(IMenuManager manager) {
		manager.add(m_action);
	}

	private void fillContextMenu(IMenuManager manager) {
		manager.add(m_action);
	}

	private void fillLocalToolBar(IToolBarManager manager) {
		manager.add(m_action);
	}

	/** Builds the clearing of the file content, as action to be installed on the context menu and on the tool bar of the view */
	private void makeActions() {
		m_action = new Action() {
			public void run() {
				OutputStream fos;
				try {
					fos = new FileOutputStream(m_jotyDesignLogFile);
					BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos, "UTF-8"));
					bw.write("");
					bw.close();
					fos.close();
					refresh();
				} catch (FileNotFoundException e) {
				} catch (IOException e) {
				}
			}
		};
		m_action.setText("Clear log");
		m_action.setToolTipText("Clear log");
		m_action.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages()
				.getImageDescriptor(ISharedImages.IMG_TOOL_DELETE));
	}

	@Override
	public void setFocus() {
		m_viewer.getControl().setFocus();
	}

}